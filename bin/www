#!/usr/bin/env node

/**
 * Module dependencies.
 */

import config from '../server/config/config';
// TODO: Setup environment configurations
process.env.debug = config.app.title;
// import app from '../server/server';
import express from '../server/config/express';
import db from '../server/config/db';

import http from 'http';
import debug from 'debug';
  debug(config.app.title);


/**
 *  Bootstrap db connection
 */
db.connect();




var app = express.init(db);



// var port = normalizePort();
app.set('port', config.port);


/**
 * Create HTTP server and
 * Listen on provided port, on all network interfaces
 */

let server = http.createServer(app);
    server
      .listen(config.port)
        .on('error', onError)
        .on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
